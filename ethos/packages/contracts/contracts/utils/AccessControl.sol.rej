diff a/ethos/packages/contracts/contracts/utils/AccessControl.sol b/ethos/packages/contracts/contracts/utils/AccessControl.sol	(rejected hunks)
@@ -3,8 +3,8 @@ pragma solidity 0.8.26;
 
 import { IPausable } from "../interfaces/IPausable.sol";
 import { IContractAddressManager } from "../interfaces/IContractAddressManager.sol";
-import { Pausable } from "@openzeppelin/contracts/utils/Pausable.sol";
-import { AccessControlEnumerable } from "@openzeppelin/contracts/access/extensions/AccessControlEnumerable.sol";
+import { PausableUpgradeable } from "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol";
+import { AccessControlEnumerableUpgradeable } from "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlEnumerableUpgradeable.sol";
 import { SignatureControl } from "./SignatureControl.sol";
 import { ETHOS_INTERACTION_CONTROL } from "./Constants.sol";
 
@@ -12,12 +12,32 @@ import { ETHOS_INTERACTION_CONTROL } from "./Constants.sol";
  * @dev Contract module that allows children to restrict access to run functions
  * by service account only.
  */
-abstract contract AccessControl is IPausable, Pausable, AccessControlEnumerable, SignatureControl {
+abstract contract AccessControl is
+  IPausable,
+  PausableUpgradeable,
+  AccessControlEnumerableUpgradeable,
+  SignatureControl
+{
+  /**
+   * @dev Constructor that disables initializers when the implementation contract is deployed.
+   * This prevents the implementation contract from being initialized, which is important for
+   * security since the implementation contract should never be used directly, only through
+   * delegatecall from the proxy.
+   */
+  constructor() {
+    _disableInitializers();
+  }
+
   bytes32 public constant OWNER_ROLE = keccak256("OWNER_ROLE");
   bytes32 public constant ADMIN_ROLE = keccak256("ADMIN_ROLE");
 
   IContractAddressManager public contractAddressManager;
 
+  // Add storage gap as the last storage variable
+  // This allows us to add new storage variables in future upgrades
+  // by reducing the size of this gap
+  uint256[50] private __gap;
+
   /**
    * @dev Constructor.
    * @param owner Owner address.
@@ -132,7 +152,7 @@ abstract contract AccessControl is IPausable, Pausable, AccessControlEnumerable,
   }
 
   // IPausable
-  function paused() public view override(IPausable, Pausable) returns (bool) {
+  function paused() public view override(IPausable, PausableUpgradeable) returns (bool) {
     return super.paused();
   }
 }
