import { xComHelpers } from '../x-com.js';

// all examples strings generated by AI; don't blame me for the stupid usernames

describe('xComHelpers', () => {
  describe('getVerifyMsg', () => {
    it('should return the correct verification message', () => {
      const evidence = '@crypto_enthusiast';
      const expectedMsg = 'Sign message to verify x.com attestation for @crypto_enthusiast';
      expect(xComHelpers.getVerifyMsg(evidence)).toBe(expectedMsg);
    });
  });

  describe('extractAccount', () => {
    it('should extract username from @username format', () => {
      expect(xComHelpers.extractAccount('@blockchain_dev')).toBe('blockchain_dev');
    });

    it('should extract username from x.com URL', () => {
      expect(xComHelpers.extractAccount('https://x.com/web3_wizard')).toBe('web3_wizard');
    });

    it('should extract username from twitter.com URL', () => {
      expect(xComHelpers.extractAccount('https://twitter.com/defi_guru')).toBe('defi_guru');
    });

    it('should extract username from tweet status URL', () => {
      expect(
        xComHelpers.extractAccount('https://x.com/ethos_network/status/1831027410181247313'),
      ).toBe('ethos_network');
    });

    it('should handle URLs without protocol', () => {
      expect(xComHelpers.extractAccount('x.com/nft_collector')).toBe('nft_collector');
    });

    it("should return the input if it's not a recognized format", () => {
      expect(xComHelpers.extractAccount('crypto_trader')).toBe('crypto_trader');
    });

    it('should handle uppercase input', () => {
      expect(xComHelpers.extractAccount('@BLOCKCHAIN_PIONEER')).toBe('blockchain_pioneer');
    });

    it('should trim whitespace', () => {
      expect(xComHelpers.extractAccount('  @eth_miner  ')).toBe('eth_miner');
    });
  });
});
